# +--------------------------------------------------------------------------+
# |                   Automated Scientific Discovery (ASD)                   |
# +--------------------------------------------------------------------------+
# CloudFormation YAML Template file
# To deploy, just access the AWS Console -> CloudFormation -> (Choose the AWS Region) -> Create Stack -> Create template in Designer
# Paste the following template and trigger the deployment

AWSTemplateFormatVersion: 2010-09-09
Description: >-
  Creates an IAM Role and StepFunctions StateMachine in the specified AWS account/region
# -----------------------------------------------------------------------------
# Parameters
# -----------------------------------------------------------------------------
Parameters:
  StateMachineName:
    Description: Name of the AWS StepFunctions StateMachineName
    Type: String
    Default: 'asd-main'
  AsdDeploymentCount:
    Description: ASD Deployment number
    Type: String
    Default: 'none'
  AsdContainerUuid:
    Description: UUID of the ASD Container
    Type: String
    Default: 'none'
# -----------------------------------------------------------------------------
# Resources
# -----------------------------------------------------------------------------
Resources:
  ASDIAMRole:
    Type: 'AWS::IAM::Role'
    Properties:
      RoleName: !Join [ '', [ 'asd-state-machine-', !Ref AsdDeploymentCount, '-', !Ref AWS::Region ] ]
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: states.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonEC2FullAccess
        - arn:aws:iam::aws:policy/AmazonS3FullAccess
        - arn:aws:iam::aws:policy/AmazonVPCReadOnlyAccess
        - arn:aws:iam::aws:policy/AWSCloudFormationFullAccess
      Policies:
      - PolicyName: Lightsail
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
            - Sid: lightsail
              Effect: Allow
              Action: lightsail:*
              Resource: '*'
      - PolicyName: CloudFormationLightsail
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
            - Sid: iamrolecreate
              Effect: Allow
              Action:
              - iam:GetRole
              - iam:UpdateAssumeRolePolicy
              - iam:ListRoleTags
              - iam:UntagRole
              - iam:TagRole
              - iam:PutRolePermissionsBoundary
              - iam:UpdateRoleDescription
              - iam:CreateRole
              - iam:ListInstanceProfiles
              - iam:ListInstanceProfilesForRole
              - iam:ListInstanceProfileTags
              - iam:GetInstanceProfile
              - iam:AddRoleToInstanceProfile
              - iam:CreateInstanceProfile
              - iam:DeleteInstanceProfile
              - iam:RemoveRoleFromInstanceProfile
              - iam:TagInstanceProfile
              - iam:UntagInstanceProfile
              - iam:DeleteRole
              - iam:AttachRolePolicy
              - iam:PutRolePolicy
              - iam:DeleteRolePermissionsBoundary
              - iam:PassRole
              - iam:CreateServiceLinkedRole
              - iam:DetachRolePolicy
              - iam:ListAttachedRolePolicies
              - iam:DeleteRolePolicy
              - iam:UpdateRole
              - iam:DeleteServiceLinkedRole
              - iam:ListRolePolicies
              - iam:GetRolePolicy
              Resource:
              - !Sub arn:aws:iam::${AWS::AccountId}:instance-profile/asg-asd-*
              - !Sub arn:aws:iam::${AWS::AccountId}:role/asg-asd-*
            - Sid: iamrolelist
              Effect: Allow
              Action: iam:ListRoles
              Resource: "*"
  ASDStateMachine:
    Type: 'AWS::StepFunctions::StateMachine'
    Properties:
      DefinitionString: !Sub |
        {
          "Comment": "ASD - Infrastructure State Machine",
          "StartAt": "Choice",
          "States": {
            "Choice": {
              "Type": "Choice",
              "Choices": [
                {
                  "Variable": "$.UploadObjectName",
                  "IsPresent": true,
                  "Next": "CreateMultipartUpload",
                  "Comment": "Upload Objects to S3"
                },
                {
                  "Variable": "$.Action",
                  "StringEquals": "StartNodes",
                  "Next": "CheckNumRunningInstances",
                  "Comment": "Scales Out / Starts ASD Nodes"
                },
                {
                  "Variable": "$.Action",
                  "StringEquals": "ShutdownNodes",
                  "Next": "AutoScalingDown",
                  "Comment": "Scales In / Shuts down ASD Nodes"
                },
                {
                  "Variable": "$.Action",
                  "StringEquals": "CheckStatus",
                  "Comment": "Check the status of the ASD Ray AutoScalingGroup and return operational information",
                  "Next": "DescribeAutoScalingGroups"
                }
              ],
              "Default": "GetBucketAcl",
              "Comment": "Choice based on input parameters"
            },
            "CheckNumRunningInstances": {
              "Type": "Task",
              "Next": "RunningInstancesYesNo",
              "Parameters": {
                "AutoScalingGroupNames.$": "States.Array(States.Format('asd-nodes-{}', $.AsdDeploymentCount))"
              },
              "Resource": "arn:aws:states:::aws-sdk:autoscaling:describeAutoScalingGroups",
              "TimeoutSeconds": 30
            },
            "RunningInstancesYesNo": {
              "Type": "Choice",
              "Choices": [
                {
                  "Variable": "$.AutoScalingGroups[0].DesiredCapacity",
                  "NumericGreaterThan": 0,
                  "Next": "InstancesAlreadyRunning"
                }
              ],
              "Default": "ScaleUpInstances"
            },
            "InstancesAlreadyRunning": {
              "Type": "Succeed"
            },
            "ScaleUpInstances": {
              "Type": "Task",
              "Parameters": {
                "AutoScalingGroupName.$": "$.AutoScalingGroups[0].AutoScalingGroupName",
                "DesiredCapacity": 1
              },
              "Resource": "arn:aws:states:::aws-sdk:autoscaling:updateAutoScalingGroup",
              "Comment": "Sets the asd-nodes AutoScaling Group Desired Capacity to 1",
              "ResultPath": null,
              "End": true
            },
            "CreateMultipartUpload": {
              "Type": "Task",
              "Next": "UploadPart",
              "Parameters": {
                "Bucket": "MyData",
                "Key": "MyData"
              },
              "Resource": "arn:aws:states:::aws-sdk:s3:createMultipartUpload",
              "Comment": "Creates a Multipart Upload for S3",
              "ResultPath": null
            },
            "UploadPart": {
              "Type": "Task",
              "Next": "CompleteMultipartUpload",
              "Parameters": {
                "Body": {},
                "Bucket": "MyData",
                "Key": "MyData",
                "PartNumber": 1234,
                "UploadId": "MyData"
              },
              "Resource": "arn:aws:states:::aws-sdk:s3:uploadPart",
              "Comment": "Uploads part of object to S3",
              "ResultPath": null
            },
            "CompleteMultipartUpload": {
              "Type": "Task",
              "Next": "Pass",
              "Parameters": {
                "Bucket": "MyData",
                "Key": "MyData",
                "UploadId": "MyData"
              },
              "Resource": "arn:aws:states:::aws-sdk:s3:completeMultipartUpload",
              "Comment": "Completes MultiPart Upload process",
              "ResultPath": null
            },
            "Pass": {
              "Type": "Pass",
              "End": true
            },
            "GetBucketAcl": {
              "Type": "Task",
              "Next": "GetCloudFormationHeadscale",
              "Parameters": {
                "Bucket": "asd-files-useast1-943339554545"
              },
              "Resource": "arn:aws:states:::aws-sdk:s3:getBucketAcl",
              "Catch": [
                {
                  "ErrorEquals": [
                    "States.TaskFailed"
                  ],
                  "Next": "CreateBucket",
                  "ResultPath": null,
                  "Comment": "Creates the ASD S3 Bucket"
                }
              ],
              "ResultPath": null,
              "Comment": "Evaluates if ASD Bucket 'asd-files-useast1-<ACCOUNT_ID>' exists"
            },
            "CreateBucket": {
              "Type": "Task",
              "Next": "GetCloudFormationHeadscale",
              "Parameters": {
                "Bucket": "asd-files-useast1-943339554545"
              },
              "Resource": "arn:aws:states:::aws-sdk:s3:createBucket",
              "ResultPath": null,
              "Comment": "Creates the ASD S3 Bucket"
            },
            "GetCloudFormationHeadscale": {
              "Type": "Task",
              "Parameters": {
                "StackName.$": "States.Format('headscale-asd-{}', $.AsdDeploymentCount)"
              },
              "Resource": "arn:aws:states:::aws-sdk:cloudformation:describeStacks",
              "Next": "UpdateStackHeadscale",
              "Catch": [
                {
                  "ErrorEquals": [
                    "States.TaskFailed"
                  ],
                  "Next": "CreateStackHeadscale",
                  "Comment": "Deploys the CloudFormation Stack if it does not exist",
                  "ResultPath": null
                }
              ],
              "ResultPath": null,
              "Comment": "Verifies if Headscale CloudFormation Stack is deployed"
            },
            "UpdateStackHeadscale": {
              "Type": "Task",
              "Next": "GetCloudFormationEc2Asg",
              "Parameters": {
                "StackName.$": "States.Format('headscale-asd-{}', $.AsdDeploymentCount)",
                "TemplateBody.$": "States.Base64Decode($.CloudFormationHeadscaleTemplateBase64)",
                "Parameters": [
                  {
                    "ParameterKey": "HeadscaleContainerImage",
                    "ParameterValue.$": "$.CloudFormationHeadscaleTemplateParamContainerImage"
                  },
                  {
                    "ParameterKey": "HeadscaleServiceName",
                    "ParameterValue": "headscale-asd"
                  },
                  {
                    "ParameterKey": "AsdDeploymentCount",
                    "ParameterValue.$": "$.AsdDeploymentCount"
                  },
                  {
                    "ParameterKey": "AsdContainerUuid",
                    "ParameterValue.$": "$.AsdContainerUuid"
                  }
                ],
                "DisableRollback": false,
                "Capabilities": [
                  "CAPABILITY_IAM",
                  "CAPABILITY_NAMED_IAM"
                ]
              },
              "Resource": "arn:aws:states:::aws-sdk:cloudformation:updateStack",
              "Catch": [
                {
                  "ErrorEquals": [
                    "States.TaskFailed"
                  ],
                  "Next": "NoUpdatesAreToBePerformedHeadscale",
                  "ResultPath": null,
                  "Comment": "Continue execution if no updates are detected"
                }
              ]
            },
            "NoUpdatesAreToBePerformedHeadscale": {
              "Type": "Pass",
              "Next": "GetCloudFormationEc2Asg"
            },
            "CreateStackHeadscale": {
              "Type": "Task",
              "Next": "WaitFor1stStackDeployment",
              "Parameters": {
                "StackName.$": "States.Format('headscale-asd-{}', $.AsdDeploymentCount)",
                "TemplateBody.$": "States.Base64Decode($.CloudFormationHeadscaleTemplateBase64)",
                "Parameters": [
                  {
                    "ParameterKey": "HeadscaleContainerImage",
                    "ParameterValue.$": "$.CloudFormationHeadscaleTemplateParamContainerImage"
                  },
                  {
                    "ParameterKey": "HeadscaleServiceName",
                    "ParameterValue": "headscale-asd"
                  },
                  {
                    "ParameterKey": "AsdDeploymentCount",
                    "ParameterValue.$": "$.AsdDeploymentCount"
                  },
                  {
                    "ParameterKey": "AsdContainerUuid",
                    "ParameterValue.$": "$.AsdContainerUuid"
                  }
                ],
                "DisableRollback": false,
                "TimeoutInMinutes": 30,
                "Capabilities": [
                  "CAPABILITY_IAM",
                  "CAPABILITY_NAMED_IAM"
                ],
                "Tags": [
                  {
                    "Key": "CreatedBy",
                    "Value": "ASD"
                  },
                  {
                    "Key": "AsdContainerUuid",
                    "Value": "${AsdContainerUuid}"
                  }
                ],
                "EnableTerminationProtection": false
              },
              "Resource": "arn:aws:states:::aws-sdk:cloudformation:createStack",
              "Comment": "Creates CloudFormation Stack for Headscale",
              "ResultPath": null
            },
            "WaitFor1stStackDeployment": {
              "Type": "Wait",
              "Next": "GetCloudFormationEc2Asg",
              "Seconds": 300,
              "Comment": "Waits 5 min for Headscale Stack to finish deploying"
            },
            "GetCloudFormationEc2Asg": {
              "Type": "Task",
              "Parameters": {
                "StackName.$": "States.Format('asg-asd-{}', $.AsdDeploymentCount)"
              },
              "Resource": "arn:aws:states:::aws-sdk:cloudformation:describeStacks",
              "Catch": [
                {
                  "ErrorEquals": [
                    "States.TaskFailed"
                  ],
                  "Next": "CreateStackEc2Asg",
                  "ResultPath": null,
                  "Comment": "Deploys the CloudFormation Stack if it does not exist"
                }
              ],
              "ResultPath": null,
              "Next": "UpdateStack"
            },
            "UpdateStack": {
              "Type": "Task",
              "Parameters": {
                "StackName.$": "States.Format('asg-asd-{}', $.AsdDeploymentCount)",
                "TemplateBody.$": "States.Base64Decode($.CloudFormationAsgTemplateBase64)",
                "Parameters": [
                  {
                    "ParameterKey": "AutoScalingGroupMaxSize",
                    "ParameterValue.$": "$.CloudFormationAsgTemplateParamGroupMaxSize"
                  },
                  {
                    "ParameterKey": "EbsVolumeSize",
                    "ParameterValue.$": "$.CloudFormationAsgTemplateParamEbsSize"
                  },
                  {
                    "ParameterKey": "Ec2AmiId",
                    "ParameterValue.$": "$.CloudFormationAsgTemplateParamEc2Ami"
                  },
                  {
                    "ParameterKey": "InstanceType",
                    "ParameterValue.$": "$.CloudFormationAsgTemplateParamInstanceType"
                  },
                  {
                    "ParameterKey": "SubnetIds",
                    "ParameterValue.$": "$.CloudFormationAsgTemplateParamSubnetIds"
                  },
                  {
                    "ParameterKey": "VpcId",
                    "ParameterValue.$": "$.CloudFormationAsgTemplateParamVpcId"
                  }
                ],
                "DisableRollback": false,
                "Capabilities": [
                  "CAPABILITY_IAM",
                  "CAPABILITY_NAMED_IAM"
                ]
              },
              "Resource": "arn:aws:states:::aws-sdk:cloudformation:updateStack",
              "Catch": [
                {
                  "ErrorEquals": [
                    "States.TaskFailed"
                  ],
                  "Comment": "Continue execution if no updates are detected",
                  "ResultPath": null,
                  "Next": "NoUpdatesAreToBePerformedAsg"
                }
              ],
              "End": true
            },
            "NoUpdatesAreToBePerformedAsg": {
              "Type": "Pass",
              "End": true
            },
            "CreateStackEc2Asg": {
              "Type": "Task",
              "Parameters": {
                "StackName.$": "States.Format('asg-asd-{}', $.AsdDeploymentCount)",
                "TemplateBody.$": "States.Base64Decode($.CloudFormationAsgTemplateBase64)",
                "Parameters": [
                  {
                    "ParameterKey": "AutoScalingGroupMaxSize",
                    "ParameterValue.$": "$.CloudFormationAsgTemplateParamGroupMaxSize"
                  },
                  {
                    "ParameterKey": "EbsVolumeSize",
                    "ParameterValue.$": "$.CloudFormationAsgTemplateParamEbsSize"
                  },
                  {
                    "ParameterKey": "Ec2AmiId",
                    "ParameterValue.$": "$.CloudFormationAsgTemplateParamEc2Ami"
                  },
                  {
                    "ParameterKey": "InstanceType",
                    "ParameterValue.$": "$.CloudFormationAsgTemplateParamInstanceType"
                  },
                  {
                    "ParameterKey": "SubnetIds",
                    "ParameterValue.$": "$.CloudFormationAsgTemplateParamSubnetIds"
                  },
                  {
                    "ParameterKey": "VpcId",
                    "ParameterValue.$": "$.CloudFormationAsgTemplateParamVpcId"
                  },
                  {
                    "ParameterKey": "AsdDeploymentCount",
                    "ParameterValue.$": "$.AsdDeploymentCount"
                  },
                  {
                    "ParameterKey": "AsdContainerUuid",
                    "ParameterValue.$": "$.AsdContainerUuid"
                  }
                ],
                "DisableRollback": false,
                "TimeoutInMinutes": 30,
                "Capabilities": [
                  "CAPABILITY_IAM",
                  "CAPABILITY_NAMED_IAM"
                ],
                "Tags": [
                  {
                    "Key": "CreatedBy",
                    "Value": "ASD"
                  },
                  {
                    "Key": "AsdContainerUuid",
                    "Value": "${AsdContainerUuid}"
                  }
                ],
                "EnableTerminationProtection": false
              },
              "Resource": "arn:aws:states:::aws-sdk:cloudformation:createStack",
              "Next": "WaitFor2ndStackDeployment",
              "Comment": "Creates CloudFormation Stack for ASD EC2 AutoScaling Group",
              "ResultPath": "$.CreateAsgOutput"
            },
            "WaitFor2ndStackDeployment": {
              "Type": "Wait",
              "Seconds": 180,
              "Comment": "Waits 3 min for AutoScaling Stack to finish deploying",
              "Next": "AutoScalingUpAfterCreate"
            },
            "AutoScalingUpAfterCreate": {
              "Type": "Task",
              "Parameters": {
                "AutoScalingGroupName.$": "States.Format('asd-nodes-{}', $.AsdDeploymentCount)",
                "DesiredCapacity": 1
              },
              "Resource": "arn:aws:states:::aws-sdk:autoscaling:updateAutoScalingGroup",
              "Comment": "Sets the asd-nodes AutoScaling Group Desired Capacity to 1",
              "ResultPath": null,
              "End": true
            },
            "AutoScalingDown": {
              "Type": "Task",
              "Parameters": {
                "AutoScalingGroupName.$": "States.Format('asd-nodes-{}', $.AsdDeploymentCount)",
                "DesiredCapacity": 0
              },
              "Resource": "arn:aws:states:::aws-sdk:autoscaling:updateAutoScalingGroup",
              "Comment": "Sets the asd-nodes AutoScaling Group Desired Capacity to 1",
              "ResultPath": null,
              "End": true
            },
            "DescribeAutoScalingGroups": {
              "Type": "Task",
              "Parameters": {
                "AutoScalingGroupNames.$": "States.Array(States.Format('asd-nodes-{}', $.AsdDeploymentCount))"
              },
              "ResultPath": "$.asd-nodes",
              "Resource": "arn:aws:states:::aws-sdk:autoscaling:describeAutoScalingGroups",
              "Next": "AsdAutoScalingGroupExists?"
            },
            "AsdAutoScalingGroupExists?": {
              "Type": "Choice",
              "Choices": [
                {
                  "Not": {
                    "Variable": "$.asd-nodes.AutoScalingGroups[0]",
                    "IsPresent": true
                  },
                  "Next": "FinishCheckStatusNoAsg"
                }
              ],
              "Default": "DescribeInstanceTypes",
              "Comment": "If/Else state that handles further logic when the ASD Autoscaling Group Exists or not"
            },
            "FinishCheckStatusNoAsg": {
              "Type": "Succeed"
            },
            "DescribeInstanceTypes": {
              "Type": "Task",
              "Parameters": {
                "InstanceTypes.$": "$.asd-nodes.AutoScalingGroups[0].Instances[*].InstanceType"
              },
              "ResultPath": "$.instance_types",
              "Resource": "arn:aws:states:::aws-sdk:ec2:describeInstanceTypes",
              "Next": "FinishCheckStatus",
              "Catch": [
                {
                  "ErrorEquals": [
                    "States.TaskFailed"
                  ],
                  "Next": "FinishCheckStatus",
                  "Comment": "Error handling when AutoScalingGroup does not have any running nodes"
                }
              ]
            },
            "FinishCheckStatus": {
              "Type": "Succeed"
            }
          }
        }
      RoleArn: !GetAtt [ASDIAMRole, Arn]
      StateMachineType: STANDARD
      StateMachineName: !Ref StateMachineName

# -----------------------------------------------------------------------------
# Outputs
# -----------------------------------------------------------------------------
Outputs:
  ASDIAMRoleARN:
    Description: "IAM Role ARN for StepFunctions"
    Value: !GetAtt [ASDIAMRole, Arn]
  ASDStateMachineARN:
    Description: "ARN for the created StepFunctions state machine"
    Value: !Ref ASDStateMachine
